#!/usr/bin/env python3
"""
Sistema de Transcri√ß√£o Autom√°tica para Gera√ß√£o de CSV - Piper TTS
"""
import os
import json
import csv
import librosa
import soundfile as sf
from pathlib import Path
from typing import List, Dict, Optional, Tuple
import threading
import time
import re

# Importa√ß√µes condicionais para diferentes engines de transcri√ß√£o
try:
    import speech_recognition as sr
    SPEECH_RECOGNITION_AVAILABLE = True
except ImportError:
    SPEECH_RECOGNITION_AVAILABLE = False

try:
    import whisper
    WHISPER_AVAILABLE = True
except ImportError:
    WHISPER_AVAILABLE = False

try:
    from transformers import pipeline
    TRANSFORMERS_AVAILABLE = True
except ImportError:
    TRANSFORMERS_AVAILABLE = False

class AutoTranscriber:
    """Sistema de transcri√ß√£o autom√°tica com m√∫ltiplos engines"""
    
    def __init__(self):
        self.engines = {
            'whisper': self._setup_whisper,
            'google': self._setup_google,
            'wav2vec2': self._setup_wav2vec2,
            'vosk': self._setup_vosk
        }
        
        self.available_engines = []
        self.current_engine = None
        self.transcription_status = {
            'is_running': False,
            'progress': 0,
            'current_file': '',
            'total_files': 0,
            'completed_files': 0,
            'errors': [],
            'results': []
        }
        
        self._check_available_engines()
    
    def _check_available_engines(self):
        """Verifica quais engines est√£o dispon√≠veis"""
        print("üîç Verificando engines de transcri√ß√£o dispon√≠veis...")
        
        # Whisper (OpenAI)
        if WHISPER_AVAILABLE:
            try:
                whisper.load_model("base")
                self.available_engines.append('whisper')
                print("‚úÖ Whisper (OpenAI) - Dispon√≠vel")
            except Exception as e:
                print(f"‚ö†Ô∏è  Whisper - Erro: {e}")
        
        # Google Speech Recognition
        if SPEECH_RECOGNITION_AVAILABLE:
            self.available_engines.append('google')
            print("‚úÖ Google Speech Recognition - Dispon√≠vel")
        
        # Wav2Vec2 (Transformers)
        if TRANSFORMERS_AVAILABLE:
            try:
                pipeline("automatic-speech-recognition", model="facebook/wav2vec2-base-960h")
                self.available_engines.append('wav2vec2')
                print("‚úÖ Wav2Vec2 (Facebook) - Dispon√≠vel")
            except Exception as e:
                print(f"‚ö†Ô∏è  Wav2Vec2 - Erro: {e}")
        
        if not self.available_engines:
            print("‚ùå Nenhum engine de transcri√ß√£o dispon√≠vel!")
            print("üí° Instale pelo menos um: pip install openai-whisper speechrecognition transformers")
    
    def _setup_whisper(self):
        """Configura Whisper"""
        if not WHISPER_AVAILABLE:
            return None
        
        try:
            # Carregar modelo (base √© um bom compromisso entre velocidade e qualidade)
            model = whisper.load_model("base")
            print("‚úÖ Whisper carregado com sucesso")
            return model
        except Exception as e:
            print(f"‚ùå Erro ao carregar Whisper: {e}")
            return None
    
    def _setup_google(self):
        """Configura Google Speech Recognition"""
        if not SPEECH_RECOGNITION_AVAILABLE:
            return None
        
        try:
            recognizer = sr.Recognizer()
            print("‚úÖ Google Speech Recognition configurado")
            return recognizer
        except Exception as e:
            print(f"‚ùå Erro ao configurar Google: {e}")
            return None
    
    def _setup_wav2vec2(self):
        """Configura Wav2Vec2"""
        if not TRANSFORMERS_AVAILABLE:
            return None
        
        try:
            pipe = pipeline("automatic-speech-recognition", 
                          model="facebook/wav2vec2-base-960h")
            print("‚úÖ Wav2Vec2 configurado")
            return pipe
        except Exception as e:
            print(f"‚ùå Erro ao configurar Wav2Vec2: {e}")
            return None
    
    def _setup_vosk(self):
        """Configura Vosk (offline)"""
        try:
            import vosk
            # Implementar configura√ß√£o do Vosk se necess√°rio
            return None
        except ImportError:
            return None
    
    def get_available_engines(self) -> List[str]:
        """Retorna lista de engines dispon√≠veis"""
        return self.available_engines.copy()
    
    def set_engine(self, engine_name: str) -> bool:
        """Define o engine de transcri√ß√£o"""
        if engine_name not in self.available_engines:
            print(f"‚ùå Engine '{engine_name}' n√£o dispon√≠vel")
            return False
        
        try:
            self.current_engine = self.engines[engine_name]()
            self.engine_name = engine_name
            print(f"‚úÖ Engine '{engine_name}' ativado")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao ativar engine '{engine_name}': {e}")
            return False
    
    def transcribe_audio(self, audio_path: str, language: str = "pt") -> Optional[str]:
        """Transcreve um √∫nico arquivo de √°udio"""
        if not self.current_engine:
            return None
        
        try:
            # Carregar e preprocessar √°udio
            audio, sr_rate = librosa.load(audio_path, sr=16000)  # 16kHz para compatibilidade
            
            if self.engine_name == 'whisper':
                return self._transcribe_whisper(audio_path, language)
            elif self.engine_name == 'google':
                return self._transcribe_google(audio, sr_rate, language)
            elif self.engine_name == 'wav2vec2':
                return self._transcribe_wav2vec2(audio, sr_rate)
            
        except Exception as e:
            print(f"‚ùå Erro na transcri√ß√£o de {audio_path}: {e}")
            return None
    
    def _transcribe_whisper(self, audio_path: str, language: str) -> Optional[str]:
        """Transcri√ß√£o com Whisper"""
        try:
            result = self.current_engine.transcribe(audio_path, language=language)
            return result["text"].strip()
        except Exception as e:
            print(f"‚ùå Erro Whisper: {e}")
            return None
    
    def _transcribe_google(self, audio: any, sr_rate: int, language: str) -> Optional[str]:
        """Transcri√ß√£o com Google"""
        try:
            # Converter para formato compat√≠vel
            import io
            import wave
            
            # Salvar temporariamente como WAV
            temp_path = "temp_audio.wav"
            sf.write(temp_path, audio, sr_rate)
            
            # Usar SpeechRecognition
            with sr.AudioFile(temp_path) as source:
                audio_data = self.current_engine.record(source)
            
            # Mapear c√≥digos de idioma
            lang_map = {
                'pt': 'pt-BR',
                'en': 'en-US',
                'es': 'es-ES',
                'fr': 'fr-FR'
            }
            
            text = self.current_engine.recognize_google(
                audio_data, 
                language=lang_map.get(language, 'pt-BR')
            )
            
            # Limpar arquivo tempor√°rio
            if os.path.exists(temp_path):
                os.remove(temp_path)
            
            return text.strip()
            
        except Exception as e:
            print(f"‚ùå Erro Google: {e}")
            return None
    
    def _transcribe_wav2vec2(self, audio: any, sr_rate: int) -> Optional[str]:
        """Transcri√ß√£o com Wav2Vec2"""
        try:
            result = self.current_engine(audio)
            return result["text"].strip()
        except Exception as e:
            print(f"‚ùå Erro Wav2Vec2: {e}")
            return None
    
    def batch_transcribe(self, audio_dir: str, output_csv: str, 
                        engine: str = "whisper", language: str = "pt",
                        callback=None) -> bool:
        """Transcri√ß√£o em lote de uma pasta de √°udios"""
        
        audio_path = Path(audio_dir)
        if not audio_path.exists():
            print(f"‚ùå Diret√≥rio n√£o encontrado: {audio_dir}")
            return False
        
        # Encontrar arquivos de √°udio
        audio_extensions = {'.wav', '.mp3', '.flac', '.m4a', '.ogg'}
        audio_files = [f for f in audio_path.iterdir() 
                      if f.suffix.lower() in audio_extensions]
        
        if not audio_files:
            print(f"‚ùå Nenhum arquivo de √°udio encontrado em {audio_dir}")
            return False
        
        print(f"üìÅ Encontrados {len(audio_files)} arquivos de √°udio")
        
        # Configurar engine
        if not self.set_engine(engine):
            return False
        
        # Inicializar status
        self.transcription_status.update({
            'is_running': True,
            'progress': 0,
            'total_files': len(audio_files),
            'completed_files': 0,
            'errors': [],
            'results': []
        })
        
        # Processar arquivos
        results = []
        for i, audio_file in enumerate(audio_files):
            self.transcription_status['current_file'] = audio_file.name
            self.transcription_status['progress'] = (i / len(audio_files)) * 100
            
            if callback:
                callback(self.transcription_status)
            
            print(f"üé§ Transcrevendo: {audio_file.name}")
            
            try:
                text = self.transcribe_audio(str(audio_file), language)
                
                if text:
                    # Limpar e formatar texto
                    text = self._clean_text(text)
                    
                    # ID do arquivo (sem extens√£o)
                    file_id = audio_file.stem
                    
                    results.append({
                        'id': file_id,
                        'text': text,
                        'file': audio_file.name,
                        'confidence': 'auto'  # Placeholder para confian√ßa
                    })
                    
                    self.transcription_status['results'].append({
                        'file': audio_file.name,
                        'text': text[:50] + '...' if len(text) > 50 else text,
                        'status': 'success'
                    })
                    
                    print(f"‚úÖ Sucesso: {text[:50]}...")
                else:
                    error_msg = f"Falha na transcri√ß√£o de {audio_file.name}"
                    self.transcription_status['errors'].append(error_msg)
                    print(f"‚ùå {error_msg}")
                
            except Exception as e:
                error_msg = f"Erro em {audio_file.name}: {str(e)}"
                self.transcription_status['errors'].append(error_msg)
                print(f"‚ùå {error_msg}")
            
            self.transcription_status['completed_files'] = i + 1
        
        # Salvar CSV
        if results:
            success = self._save_csv(results, output_csv)
            self.transcription_status['progress'] = 100
            self.transcription_status['is_running'] = False
            
            if callback:
                callback(self.transcription_status)
            
            return success
        else:
            print("‚ùå Nenhuma transcri√ß√£o bem-sucedida")
            self.transcription_status['is_running'] = False
            return False
    
    def _clean_text(self, text: str) -> str:
        """Limpa e formata o texto transcrito"""
        if not text:
            return ""
        
        # Remover espa√ßos extras
        text = re.sub(r'\s+', ' ', text.strip())
        
        # Capitalizar primeira letra
        if text:
            text = text[0].upper() + text[1:]
        
        # Adicionar ponto final se n√£o houver pontua√ß√£o
        if text and text[-1] not in '.!?':
            text += '.'
        
        return text
    
    def _save_csv(self, results: List[Dict], output_path: str) -> bool:
        """Salva resultados em arquivo CSV"""
        try:
            with open(output_path, 'w', newline='', encoding='utf-8') as csvfile:
                for result in results:
                    # Formato: id|texto
                    csvfile.write(f"{result['id']}|{result['text']}\n")
            
            print(f"‚úÖ CSV salvo: {output_path}")
            print(f"üìä Total de transcri√ß√µes: {len(results)}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao salvar CSV: {e}")
            return False
    
    def get_transcription_status(self) -> Dict:
        """Retorna status atual da transcri√ß√£o"""
        return self.transcription_status.copy()

class CSVGenerator:
    """Gerador de CSV com m√∫ltiplas op√ß√µes"""
    
    def __init__(self):
        self.transcriber = AutoTranscriber()
    
    def create_from_text_file(self, text_file: str, audio_dir: str, output_csv: str) -> bool:
        """Cria CSV a partir de arquivo de texto com uma linha por √°udio"""
        try:
            with open(text_file, 'r', encoding='utf-8') as f:
                lines = [line.strip() for line in f.readlines() if line.strip()]
            
            # Encontrar arquivos de √°udio
            audio_path = Path(audio_dir)
            audio_files = sorted([f for f in audio_path.iterdir() 
                                if f.suffix.lower() in {'.wav', '.mp3', '.flac'}])
            
            if len(lines) != len(audio_files):
                print(f"‚ö†Ô∏è  Aviso: {len(lines)} linhas de texto, {len(audio_files)} arquivos de √°udio")
            
            # Criar CSV
            results = []
            for i, (audio_file, text) in enumerate(zip(audio_files, lines)):
                results.append({
                    'id': audio_file.stem,
                    'text': text,
                    'file': audio_file.name
                })
            
            return self._save_csv_results(results, output_csv)
            
        except Exception as e:
            print(f"‚ùå Erro ao criar CSV do arquivo de texto: {e}")
            return False
    
    def create_from_json(self, json_file: str, output_csv: str) -> bool:
        """Cria CSV a partir de arquivo JSON"""
        try:
            with open(json_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            results = []
            for item in data:
                if 'id' in item and 'text' in item:
                    results.append({
                        'id': item['id'],
                        'text': item['text'],
                        'speaker': item.get('speaker', '')
                    })
            
            return self._save_csv_results(results, output_csv)
            
        except Exception as e:
            print(f"‚ùå Erro ao criar CSV do JSON: {e}")
            return False
    
    def create_interactive(self, audio_dir: str, output_csv: str) -> bool:
        """Cria CSV de forma interativa, reproduzindo √°udios"""
        try:
            audio_path = Path(audio_dir)
            audio_files = sorted([f for f in audio_path.iterdir() 
                                if f.suffix.lower() in {'.wav', '.mp3', '.flac'}])
            
            if not audio_files:
                print("‚ùå Nenhum arquivo de √°udio encontrado")
                return False
            
            print(f"üéµ Modo interativo: {len(audio_files)} arquivos")
            print("üí° Para cada √°udio, digite a transcri√ß√£o ou 'skip' para pular")
            
            results = []
            for i, audio_file in enumerate(audio_files):
                print(f"\nüìÅ Arquivo {i+1}/{len(audio_files)}: {audio_file.name}")
                
                # Aqui voc√™ poderia integrar um player de √°udio
                # Por enquanto, apenas solicita a transcri√ß√£o
                
                text = input("üìù Digite a transcri√ß√£o: ").strip()
                
                if text.lower() == 'skip':
                    continue
                
                if text:
                    results.append({
                        'id': audio_file.stem,
                        'text': text,
                        'file': audio_file.name
                    })
            
            return self._save_csv_results(results, output_csv)
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  Processo interrompido pelo usu√°rio")
            return False
        except Exception as e:
            print(f"‚ùå Erro no modo interativo: {e}")
            return False
    
    def _save_csv_results(self, results: List[Dict], output_path: str) -> bool:
        """Salva resultados em CSV"""
        try:
            with open(output_path, 'w', newline='', encoding='utf-8') as csvfile:
                for result in results:
                    if 'speaker' in result and result['speaker']:
                        # Formato multi-speaker: id|speaker|text
                        csvfile.write(f"{result['id']}|{result['speaker']}|{result['text']}\n")
                    else:
                        # Formato single-speaker: id|text
                        csvfile.write(f"{result['id']}|{result['text']}\n")
            
            print(f"‚úÖ CSV salvo: {output_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao salvar CSV: {e}")
            return False

# Inst√¢ncia global
global_transcriber = AutoTranscriber()
global_csv_generator = CSVGenerator()

def get_transcription_engines() -> List[str]:
    """Retorna engines de transcri√ß√£o dispon√≠veis"""
    return global_transcriber.get_available_engines()

def start_auto_transcription(audio_dir: str, output_csv: str, 
                           engine: str = "whisper", language: str = "pt",
                           callback=None) -> bool:
    """Inicia transcri√ß√£o autom√°tica"""
    return global_transcriber.batch_transcribe(
        audio_dir, output_csv, engine, language, callback
    )

def get_transcription_status() -> Dict:
    """Retorna status da transcri√ß√£o"""
    return global_transcriber.get_transcription_status()

if __name__ == "__main__":
    # Teste do sistema
    print("üß™ Testando sistema de transcri√ß√£o autom√°tica...")
    
    transcriber = AutoTranscriber()
    print(f"üìã Engines dispon√≠veis: {transcriber.get_available_engines()}")
    
    # Exemplo de uso
    if transcriber.available_engines:
        print("\n‚úÖ Sistema pronto para uso!")
        print("\nüìù Exemplos de uso:")
        print("1. Transcri√ß√£o autom√°tica: transcriber.batch_transcribe('audio/', 'metadata.csv')")
        print("2. CSV de arquivo texto: csv_gen.create_from_text_file('texts.txt', 'audio/', 'metadata.csv')")
        print("3. Modo interativo: csv_gen.create_interactive('audio/', 'metadata.csv')")
    else:
        print("\n‚ùå Instale pelo menos um engine:")
        print("pip install openai-whisper")
        print("pip install SpeechRecognition")
        print("pip install transformers torch")